#!/usr/bin/python3
#
# Smart Meter Redis Logger
# Reads mqtt power-log and sends it to Redis Server
# Copyright: Stefan Koch
# License: GPLv3
#

import sys
import os

from modules.configfile import ConfigFile
from modules.ana_pcur import AnaPCur
from modules.ana_ptot import AnaPTot

script_d = os.path.dirname(os.path.realpath(__file__))
os.chdir(script_d)

print("Smart Meter Redis Logger")

#
# Check for debug mode (use -d)
#
debug = False
mock_mqtt = False
mock_red = False
if 2 == len(sys.argv):
    cmd_arg = sys.argv[1]
    if cmd_arg == "-d":
        debug = True

    if cmd_arg == "-redmock":
        debug = True
        red_mock = True

    if cmd_arg == "-sim":
        debug = True
        mock_red = True
        mock_mqtt = True

if mock_mqtt:
    print("WARNING: import mqtt simulation")
    from tests.mqtt_reader_emu import mqtt_run_forever
else:
    from modules.mqtt_reader import mqtt_run_forever

if mock_red:
    print("WARNING: import rediscon simulation")
    from tests.rediscon_emu import RedisCon
else:
    sys.path.append("../rediscon")
    from rediscon import RedisCon

#
# open and parse configuration file
# see smlogger.conf-example for examples
#
try:
    conf            = ConfigFile("smlogger.conf")
    mqtt_topic      = conf.get_value("mqtt_topic")
    redis_server    = conf.get_value("redis_server")
    opts            = conf.get_dict()
except Exception as e:
    print(e)
    sys.exit(1)

#
# print out important configuration parameters
#
print("---------------------------------")
print("redis_server      = " + str(redis_server))
print("mqtt_topic        = " + str(mqtt_topic))
print("debug             = " + str(debug))
print("---------------------------------")

#
# connect to Redis
# Redis is our outgoing data channel. The redis instance is mostly remote
# you can modify the value keys in the config file
#
print("connect Redis..")
try:
    red = RedisCon(name="powlog", host=redis_server, log_enabled=False, trx_log=debug)
    red.setConMonInterval(5)
    red.connect()
except Exception as e:
    print(e)
    sys.exit(1)
print("OK")

#
# build the analysis objects
#
ana_pcur = AnaPCur(redObj = red, opts=opts, debug=debug)
ana_pcur.print_opts()
ana_ptot = AnaPTot(redObj = red, opts=opts, debug=debug)
ana_ptot.print_opts()
ana_pkwh = AnaPKwh(redObj = red, opts=opts, debug=debug)
ana_pkwh.print_opts()

#
# (part of mqtt callback)
# for every mqtt message this functionis executed
# here happens the averaging and time triggered updates to redis
#
def update(data):
    try:
        p_cur = data['pmon']
        p_tot = data['ptot']
    except:
        return
    ana_pcur.update(p_cur)
    ana_ptot.update(p_tot)

    # here we use the smoothed value from pcur
    ana_pkwh.update(ana_pcur.getValue)

mqtt_run_forever("localhost", mqtt_topic, update)

# vim: set expandtab ts=4:
