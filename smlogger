#!/usr/bin/python3
#
# Smart Meter Redis Logger
# Reads mqtt power-log and sends it to Redis Server
# Copyright: Stefan Koch
# License: GPLv3
#

import paho.mqtt.client as mqtt
from   datetime import datetime
import json
import sys
import os

from modules.configfile import ConfigFile
from modules.ana_pcur import AnaPCur
from modules.ana_ptot import AnaPTot

script_d = os.path.dirname(os.path.realpath(__file__))
os.chdir(script_d)

print("Smart Meter Redis Logger")

#
# Check for debug mode (use -d)
#
debug = False
if 2 == len(sys.argv):
    cmd_arg = sys.argv[1]
    if cmd_arg == "-d":
        debug = True
        mock_red = False

    if cmd_arg == "-dred":
        debug = True
        mock_red = True

#
# open and parse configuration file
# see smlogger.conf-example for examples
#
try:
    conf            = ConfigFile("smlogger.conf")
    mqtt_topic      = conf.get_value("mqtt_topic")
    redis_server    = conf.get_value("redis_server")
    opts            = conf.get_dict()
except Exception as e:
    print(e)
    sys.exit(1)

#
# print out important configuration parameters
#
print("---------------------------------")
print("redis_server      = " + str(redis_server))
print("mqtt_topic        = " + str(mqtt_topic))
print("debug             = " + str(debug))
print("---------------------------------")

#
# connect to Redis
# Redis is our outgoing data channel. The redis instance is mostly remote
# you can modify the value keys in the config file
#
print("connect Redis..")
try:
    if mock_red:
        print("Import Mocked RedisCon")
        from tests.rediscon_emu import RedisCon
    else:
        sys.path.append("../rediscon")
        from rediscon import RedisCon

    red = RedisCon(name="powlog", host=redis_server, log_enabled=False, trx_log=debug)
    red.setConMonInterval(5)
    red.connect()
except Exception as e:
    print(e)
    sys.exit(1)
print("OK")

#
# build the analysis objects
#
ana_pcur = AnaPCur(redObj = red, opts=opts, debug=debug)
ana_ptot = AnaPCur(redObj = red, opts=opts, debug=debug)

#
# (part of mqtt callback)
# for every mqtt message this functionis executed
# here happens the averaging and time triggered updates to redis
#
def update(data):
    try:
        p_cur = data['pmon']
        p_tot = data['ptot']
    except:
        return
    ana_pcur.update(p_cur)
    ana_ptot.update(p_tot)


#
# (mqtt callback)
# connection indicator, were we subscribe to the powlog mqtt topic
#
def mqtt_connect(client, userdata, flags, rc):
    print("OK " + str(rc))
    client.subscribe(mqtt_topic)

#
# (mqtt callback)
# called for every message on mqtt topic
# here we convert the json to python-dictionary
# any conversion error leads to ignore the message
#
def mqtt_message(client, userdata, msg):
    if (mqtt_topic == msg.topic):
        try:
            data = json.loads(msg.payload.decode("utf-8"))
        except:
            print("error json decode")
            print(str(msg.payload))
            return
        update(data)


print("connect MQTT..")
client = mqtt.Client()
client.on_connect = mqtt_connect
client.on_message = mqtt_message
client.connect("localhost", 1883, 60)
client.loop_forever()

# vim: set expandtab ts=4:
